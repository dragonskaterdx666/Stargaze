//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Stargaze.Input
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""21c530fc-a68d-4f19-93b8-80368fcf85a1"",
            ""actions"": [
                {
                    ""name"": ""Strafe"",
                    ""type"": ""Value"",
                    ""id"": ""d7e30dcb-eed1-440d-82f0-767a11bbfa03"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6ca6126c-19ac-44ff-99af-5873f93c9f3a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3e65cb31-32d6-44a4-9924-293509c96799"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""4a435987-f105-42b9-852c-a1adae56ebe3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""d5055286-a448-44b6-a573-db1a195c08f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""2b510b2c-6c8c-4d31-a173-c5bf27010bad"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6057039b-ada7-48bb-9983-c277bb4e65bc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b6b40040-b8e8-40b2-935b-a1861685d2fe"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8c9d8829-7258-4d60-b5af-638315547e36"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fb303326-ff80-43f1-ac1a-407be2a2c1b3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""18812069-5db4-4c8f-9506-8d950f1edde0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""2517f71e-0a39-4464-9d82-8890778a5c18"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""b79a5e9c-4e2a-441b-b4f8-205056447423"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""79c729d8-b93f-4adc-bc1b-c532f40d2046"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""14f5ce5b-1ba0-43f9-a83a-8e35c60683fa"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8b4dbdd7-615e-460e-850e-c23a2adfa601"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d0421537-26fc-444e-b4a5-bab7fb2b06eb"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""38d6410b-7030-4534-96cf-6205b6e0cd0c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""003e99b1-7be9-4ba5-8eb6-ba118cc8269c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""5f540b91-bdf4-4ae6-80f0-f54761f278f4"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""417cc373-3f3c-4488-ba53-8dff54cb2a68"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""91389a7d-9748-4afd-afa0-5607deb71c96"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""bafb73c2-ef66-40fe-bbf3-7a442f2c5be2"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""18bcb55d-fda5-45ef-978d-8e8aa682d4f7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd1e0a4e-f6dc-4aad-8b8a-78ad992dc2f1"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec9c5069-75c9-45d6-a9c3-af8ead57af6e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""071b70e9-5306-40ad-a24d-887275ba77e0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1224598-d71b-48f2-a18a-16203f9d476f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db361a23-6d05-4aee-b74c-860c6b7a3176"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8566ea70-dcf0-42f7-b4eb-d83fa49f1fc8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ExitInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40d2bd33-5d62-412a-a39a-68a11f46583f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ExitInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c477274-0acb-47a9-a753-ffb3ef50befa"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ExitInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Magnet"",
            ""id"": ""8dd0bd03-d059-4abc-a7fc-a43f7d409140"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""44ad56f2-1466-4ec1-9580-29f111eb4205"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22bb71b7-deeb-4cca-91f9-15c243c7e6a5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bb082bb-da0d-4c9e-82e9-8d6f2a36902e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inspect"",
            ""id"": ""d58e49eb-b2f0-4277-b152-23a82af1c718"",
            ""actions"": [
                {
                    ""name"": ""Turn"",
                    ""type"": ""Button"",
                    ""id"": ""8569be69-90a4-4eed-b9f9-d6446f530f66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""56b78d1e-9ff4-46ef-bd6b-92e58f74d1f4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Coms"",
            ""id"": ""30c3ca6f-eaf2-4f85-a398-57f53aa5ab82"",
            ""actions"": [
                {
                    ""name"": ""PushToTalk"",
                    ""type"": ""Button"",
                    ""id"": ""ae333375-239c-4eb2-a2d3-464897e2a406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""36b309b5-2ade-4f66-b111-0ca4b4af9191"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PushToTalk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""7d6d65cf-2073-4046-95a0-7c039661bee1"",
            ""actions"": [
                {
                    ""name"": ""Virtual Cursor Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5573a905-3d0b-45c9-b8b4-c010280332bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Virtual Cursor Click"",
                    ""type"": ""Button"",
                    ""id"": ""36fc4bc7-25b4-46d9-9f94-499963f48637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""498cd97b-7eef-4294-8b0f-6dae0d14aab3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Virtual Cursor Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60985ccb-afe5-4dd9-8cf0-9312a627fc8c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Virtual Cursor Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d8236ad-0f36-4527-abe2-0ca8fdf59571"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Virtual Cursor Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02538f99-9e09-46b7-a88c-687668a6564c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Virtual Cursor Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Strafe = m_Player.FindAction("Strafe", throwIfNotFound: true);
            m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
            m_Player_ExitInteraction = m_Player.FindAction("ExitInteraction", throwIfNotFound: true);
            // Magnet
            m_Magnet = asset.FindActionMap("Magnet", throwIfNotFound: true);
            m_Magnet_Movement = m_Magnet.FindAction("Movement", throwIfNotFound: true);
            // Inspect
            m_Inspect = asset.FindActionMap("Inspect", throwIfNotFound: true);
            m_Inspect_Turn = m_Inspect.FindAction("Turn", throwIfNotFound: true);
            // Coms
            m_Coms = asset.FindActionMap("Coms", throwIfNotFound: true);
            m_Coms_PushToTalk = m_Coms.FindAction("PushToTalk", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_VirtualCursorDelta = m_UI.FindAction("Virtual Cursor Delta", throwIfNotFound: true);
            m_UI_VirtualCursorClick = m_UI.FindAction("Virtual Cursor Click", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Strafe;
        private readonly InputAction m_Player_Look;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_Interact;
        private readonly InputAction m_Player_ExitInteraction;
        public struct PlayerActions
        {
            private @InputActions m_Wrapper;
            public PlayerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Strafe => m_Wrapper.m_Player_Strafe;
            public InputAction @Look => m_Wrapper.m_Player_Look;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @Interact => m_Wrapper.m_Player_Interact;
            public InputAction @ExitInteraction => m_Wrapper.m_Player_ExitInteraction;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Strafe.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStrafe;
                    @Strafe.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStrafe;
                    @Strafe.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStrafe;
                    @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                    @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                    @ExitInteraction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnExitInteraction;
                    @ExitInteraction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnExitInteraction;
                    @ExitInteraction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnExitInteraction;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Strafe.started += instance.OnStrafe;
                    @Strafe.performed += instance.OnStrafe;
                    @Strafe.canceled += instance.OnStrafe;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @ExitInteraction.started += instance.OnExitInteraction;
                    @ExitInteraction.performed += instance.OnExitInteraction;
                    @ExitInteraction.canceled += instance.OnExitInteraction;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Magnet
        private readonly InputActionMap m_Magnet;
        private IMagnetActions m_MagnetActionsCallbackInterface;
        private readonly InputAction m_Magnet_Movement;
        public struct MagnetActions
        {
            private @InputActions m_Wrapper;
            public MagnetActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Magnet_Movement;
            public InputActionMap Get() { return m_Wrapper.m_Magnet; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MagnetActions set) { return set.Get(); }
            public void SetCallbacks(IMagnetActions instance)
            {
                if (m_Wrapper.m_MagnetActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_MagnetActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_MagnetActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_MagnetActionsCallbackInterface.OnMovement;
                }
                m_Wrapper.m_MagnetActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                }
            }
        }
        public MagnetActions @Magnet => new MagnetActions(this);

        // Inspect
        private readonly InputActionMap m_Inspect;
        private IInspectActions m_InspectActionsCallbackInterface;
        private readonly InputAction m_Inspect_Turn;
        public struct InspectActions
        {
            private @InputActions m_Wrapper;
            public InspectActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Turn => m_Wrapper.m_Inspect_Turn;
            public InputActionMap Get() { return m_Wrapper.m_Inspect; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InspectActions set) { return set.Get(); }
            public void SetCallbacks(IInspectActions instance)
            {
                if (m_Wrapper.m_InspectActionsCallbackInterface != null)
                {
                    @Turn.started -= m_Wrapper.m_InspectActionsCallbackInterface.OnTurn;
                    @Turn.performed -= m_Wrapper.m_InspectActionsCallbackInterface.OnTurn;
                    @Turn.canceled -= m_Wrapper.m_InspectActionsCallbackInterface.OnTurn;
                }
                m_Wrapper.m_InspectActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Turn.started += instance.OnTurn;
                    @Turn.performed += instance.OnTurn;
                    @Turn.canceled += instance.OnTurn;
                }
            }
        }
        public InspectActions @Inspect => new InspectActions(this);

        // Coms
        private readonly InputActionMap m_Coms;
        private IComsActions m_ComsActionsCallbackInterface;
        private readonly InputAction m_Coms_PushToTalk;
        public struct ComsActions
        {
            private @InputActions m_Wrapper;
            public ComsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PushToTalk => m_Wrapper.m_Coms_PushToTalk;
            public InputActionMap Get() { return m_Wrapper.m_Coms; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ComsActions set) { return set.Get(); }
            public void SetCallbacks(IComsActions instance)
            {
                if (m_Wrapper.m_ComsActionsCallbackInterface != null)
                {
                    @PushToTalk.started -= m_Wrapper.m_ComsActionsCallbackInterface.OnPushToTalk;
                    @PushToTalk.performed -= m_Wrapper.m_ComsActionsCallbackInterface.OnPushToTalk;
                    @PushToTalk.canceled -= m_Wrapper.m_ComsActionsCallbackInterface.OnPushToTalk;
                }
                m_Wrapper.m_ComsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PushToTalk.started += instance.OnPushToTalk;
                    @PushToTalk.performed += instance.OnPushToTalk;
                    @PushToTalk.canceled += instance.OnPushToTalk;
                }
            }
        }
        public ComsActions @Coms => new ComsActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_VirtualCursorDelta;
        private readonly InputAction m_UI_VirtualCursorClick;
        public struct UIActions
        {
            private @InputActions m_Wrapper;
            public UIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @VirtualCursorDelta => m_Wrapper.m_UI_VirtualCursorDelta;
            public InputAction @VirtualCursorClick => m_Wrapper.m_UI_VirtualCursorClick;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @VirtualCursorDelta.started -= m_Wrapper.m_UIActionsCallbackInterface.OnVirtualCursorDelta;
                    @VirtualCursorDelta.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnVirtualCursorDelta;
                    @VirtualCursorDelta.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnVirtualCursorDelta;
                    @VirtualCursorClick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnVirtualCursorClick;
                    @VirtualCursorClick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnVirtualCursorClick;
                    @VirtualCursorClick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnVirtualCursorClick;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @VirtualCursorDelta.started += instance.OnVirtualCursorDelta;
                    @VirtualCursorDelta.performed += instance.OnVirtualCursorDelta;
                    @VirtualCursorDelta.canceled += instance.OnVirtualCursorDelta;
                    @VirtualCursorClick.started += instance.OnVirtualCursorClick;
                    @VirtualCursorClick.performed += instance.OnVirtualCursorClick;
                    @VirtualCursorClick.canceled += instance.OnVirtualCursorClick;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnStrafe(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnExitInteraction(InputAction.CallbackContext context);
        }
        public interface IMagnetActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
        public interface IInspectActions
        {
            void OnTurn(InputAction.CallbackContext context);
        }
        public interface IComsActions
        {
            void OnPushToTalk(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnVirtualCursorDelta(InputAction.CallbackContext context);
            void OnVirtualCursorClick(InputAction.CallbackContext context);
        }
    }
}
